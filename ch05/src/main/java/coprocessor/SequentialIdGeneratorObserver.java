package coprocessor;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.hbase.CoprocessorEnvironment;
import org.apache.hadoop.hbase.client.Durability;
import org.apache.hadoop.hbase.client.Put;
import org.apache.hadoop.hbase.coprocessor.ObserverContext;
import org.apache.hadoop.hbase.coprocessor.RegionCoprocessorEnvironment;
import org.apache.hadoop.hbase.coprocessor.RegionObserver;
import org.apache.hadoop.hbase.regionserver.HRegion;
import org.apache.hadoop.hbase.util.Bytes;
import org.apache.hadoop.hbase.wal.WALEdit;

import java.util.Random;
import java.util.concurrent.atomic.AtomicInteger;

/**
 * SequentialIdGeneratorObserver Adds a coprocessor local ID into the operation
 */
public class SequentialIdGeneratorObserver implements RegionObserver {
    public static final Log LOG = LogFactory.getLog(HRegion.class);

    private static String KEY_ID = "X-ID-GEN";
    private byte[] family;
    private byte[] qualifier;
    private String regionName;

    private Random rnd = new Random();
    private int delay;

    @Override
    public void start(CoprocessorEnvironment e) {
        if (e instanceof RegionCoprocessorEnvironment) {
            RegionCoprocessorEnvironment env = (RegionCoprocessorEnvironment) e;
            // co SequentialIdGeneratorObserver-1-Conf Get environment and configuration instances.
            Configuration conf = env.getConfiguration();
            this.regionName = env.getRegionInfo().getEncodedName();
            String family = conf.get("com.larsgeorge.copro.seqidgen.family", "cf1");
            this.family = Bytes.toBytes(family);
            // co SequentialIdGeneratorObserver-2-Settings Retrieve the settings passed into the configuration.
            String qualifier = conf.get("com.larsgeorge.copro.seqidgen.qualifier", "GENID");
            this.qualifier = Bytes.toBytes(qualifier);
            int startId = conf.getInt("com.larsgeorge.copro.seqidgen.startId", 1);
            this.delay = conf.getInt("com.larsgeorge.copro.seqidgen.delay", 100);
            // co SequentialIdGeneratorObserver-3-Gen Set up generator if this has not been done yet on this region server.
            env.getSharedData().putIfAbsent(KEY_ID, new AtomicInteger(startId));
        } else {
            LOG.warn("Received wrong context.");
        }
    }

    @Override
    public void stop(CoprocessorEnvironment e) {
        if (e instanceof RegionCoprocessorEnvironment) {
            RegionCoprocessorEnvironment env = (RegionCoprocessorEnvironment) e;
            AtomicInteger id = (AtomicInteger) env.getSharedData().get(KEY_ID);
            // co SequentialIdGeneratorObserver-4-Log Log the final number generated by this coprocessor.
            LOG.info("Final ID issued: " + regionName + "-" + id.get());
        } else {
            LOG.warn("Received wrong context.");
        }
    }

    @Override
    public void prePut(ObserverContext<RegionCoprocessorEnvironment> e, Put put, WALEdit edit, Durability durability) {
        RegionCoprocessorEnvironment env = e.getEnvironment();
        AtomicInteger id = (AtomicInteger) env.getSharedData().get(KEY_ID);
        // co SequentialIdGeneratorObserver-5-SetId Set the shared ID for this instance of put.
        put.addColumn(family, qualifier, Bytes.toBytes(regionName + "-" +
                id.incrementAndGet()));

        try {
            // co SequentialIdGeneratorObserver-6-Sleep Sleep for 0 to "delay" milliseconds.
            Thread.sleep(rnd.nextInt(delay));
        } catch (InterruptedException e1) {
            e1.printStackTrace();
        }
    }
}
